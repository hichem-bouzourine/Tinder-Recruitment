<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
const int N = 5;         // # clients
typedef int[0,N-1] id_t;

chan        commander[N], attendre[N], fini[N];
urgent chan aller[N];
</declaration>
	<template>
		<name x="40" y="16">Client</name>
		<parameter>const id_t id</parameter>
		<declaration>clock t;</declaration>
	</template>
	<template>
		<name x="40" y="16">Barman</name>
		<declaration>id_t list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
	</template>
	<system>system Client, Barman;
</system>
	<queries>
		<query>
			<formula>
			</formula>
			<comment>===== Validation Properties:
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Barman.verre_occupe
			</formula>
			<comment>Le barman peut recevoir la commande des clients
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Client(0).Boit_un_calva
			</formula>
			<comment>Le client 0 peut boire un calva
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Client(1).Boit_un_calva
			</formula>
			<comment>Le client 1 prut boire un calva
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Client(0).Boit_un_calva and Client(1).Boit_cafe
			</formula>
			<comment>Le client 0 peut boire un calva pendant que le client 1 boit un cafe
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Client(0).Boit_un_calva and (forall (i : id_t) i != 0 imply Client(i).Boit_cafe)
			</formula>
			<comment>Le client 0 peut boire un calva pendant que tous les autres boivent un cafe
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Safety Properties:
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Client(i).Boit_un_calva &amp;&amp; Client(j).Boit_un_calva imply i == j
			</formula>
			<comment>Jamais il y a plus de deux clients qui boivent un calva aux meme temps
			</comment>
		</query>
		<query>
			<formula>A[] Gate.list[N] == 0
			</formula>
			<comment>There can never be N elements in the queue (thus the array will not overflow).
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Liveness Properties:
			</comment>
		</query>
		<query>
			<formula>Client(0).Passe_commande --&gt; Client(0).Boit_un_calva
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.
			</comment>
		</query>
		<query>
			<formula>Client(1).Passe_commande --&gt; Client(1).Boit_un_calva
			</formula>
			<comment>===== Deadlock checking:
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system is deadlock-free.
			</comment>
		</query>
	</queries>
</nta>
